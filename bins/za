#!/usr/bin/env bash
# shellcheck disable=SC2154
 
# @describe Zellij Session Launcher & Manager
# @meta version 1.0.0
# @meta require-tools zellij,gum,sed,awk,grep
 
# @cmd                  List Available Sessions
# @alias  ls,show
# @flag   -p --plain    No Formatting
# @flag   -n --names    Only print session names
list() {
  local extra_flags=""
 
  [[ -n "$argc_plain" ]] && extra_flags="$extra_flags --no-formatting"
  [[ -n "$argc_names" ]] && extra_flags="$extra_flags --short"
 
  # shellcheck disable=SC2086
  zellij list-sessions $extra_flags \
    | sort
 
  return
}
 
# @cmd                  Create a New Session
# @alias  n,add
# @arg    name          Specify the session name
new() {
  local NAME
  if [[ -n "$argc_name" ]]; then
    NAME="$argc_name"
  else
    NAME=$(
      gum input \
        --prompt="▌" \
        --value="$argc_name" \
        --placeholder="Session Name..." \
        --prompt.foreground="139"
    )
  fi
  # log "New: $NAME"
  zellij --session "$NAME"
 
  return
}
 
# @cmd                  Launch an active or cached session
# @arg    session       Specify the session name
# @meta default-subcommand
pick() {
  local __list=$($0 list --names)
 
  if [[ -z "$argc_session" ]]; then
    local __set_height=$((__h = $(tput lines) - 10, __lh = $(echo "$__list" | tr " " "\n" | wc -l) + 3, __lh > __h ? __h : __lh))
    SELECTION=$(
      echo "$__list" \
        | sed '1 i\󰌨 Create a new sesion' \
        | gum choose \
          --cursor="▌" \
          --height="$__set_height" \
          --header="Select a session to attach to" \
          --cursor.foreground="139"
      # --selected="ide" \
    )
  else
    if echo "$__list" | grep -Poq "(?:^|[ ])$argc_session(?:$|[ ])"; then
      SELECTION="$argc_session"
    else
      $0 new "${argc_session:-}"
    fi
  fi
 
  if [[ $SELECTION =~ (^[󰌨].+) ]]; then
    $0 new
  elif [[ -n $SELECTION ]]; then
    # log "Attach: $SELECTION"
    zellij attach "$SELECTION"
  fi
 
  return
}
 
# shellcheck disable=SC2154
# @cmd                  Delete a Session
# @alias  rm,remove
# @arg    deletename!         Session to delete
# @flag   -f --force    Delete even if active
delete() {
  local extra_flags=""
 
  [[ -n "$argc_force" ]] && extra_flags="$extra_flags --force"
 
  # shellcheck disable=SC2086
  zellij delete-session $extra_flags $argc_deletename
 
  return
}
 
# @cmd                  Kill a session
# @alias  x,zap
# @arg    killname!         Session to kill
kill() {
  # shellcheck disable=SC2086
  zellij kill-session $argc_killname
 
  return
}
 
# ARGC-BUILD {
# This block was generated by argc (https://github.com/sigoden/argc).
# Modifying it manually is not recommended
 
_argc_run() {
    if [[ "${1:-}" == "___internal___" ]]; then
        _argc_die "error: unsupported ___internal___ command"
    fi
    if [[ "${OS:-}" == "Windows_NT" ]] && [[ -n "${MSYSTEM:-}" ]]; then
        set -o igncr
    fi
    argc__args=("$(basename "$0" .sh)" "$@")
    argc__positionals=()
    _argc_index=1
    _argc_len="${#argc__args[@]}"
    _argc_tools=()
    _argc_parse
    _argc_require_tools "${_argc_tools[@]}"
    if [ -n "${argc__fn:-}" ]; then
        $argc__fn "${argc__positionals[@]}"
    fi
}
 
_argc_usage() {
    cat <<-'EOF'
zellij-picker 1.0.0
Zellij Session Launcher & Manager
 
USAGE: zellij-picker <COMMAND>
 
ARGS:
  [SESSION]  Specify the session name
 
COMMANDS:
  list    List Available Sessions [aliases: ls, show]
  new     Create a New Session [aliases: n, add]
  pick    Launch an active or cached session [default]
  delete  Delete a Session [aliases: rm, remove]
  kill    Kill a session [aliases: x, zap]
EOF
    exit
}
 
_argc_version() {
    echo zellij-picker 1.0.0
    exit
}
 
_argc_parse() {
    local _argc_key _argc_action
    local _argc_subcmds="list, ls, show, new, n, add, pick, delete, rm, remove, kill, x, zap"
    while [[ $_argc_index -lt $_argc_len ]]; do
        _argc_item="${argc__args[_argc_index]}"
        _argc_key="${_argc_item%%=*}"
        case "$_argc_key" in
        --help | -help | -h)
            _argc_usage
            ;;
        --version | -version | -V)
            _argc_version
            ;;
        --)
            _argc_dash="${#argc__positionals[@]}"
            argc__positionals+=("${argc__args[@]:$((_argc_index + 1))}")
            _argc_index=$_argc_len
            break
            ;;
        list | ls | show)
            _argc_index=$((_argc_index + 1))
            _argc_action=_argc_parse_list
            break
            ;;
        new | n | add)
            _argc_index=$((_argc_index + 1))
            _argc_action=_argc_parse_new
            break
            ;;
        pick)
            _argc_index=$((_argc_index + 1))
            _argc_action=_argc_parse_pick
            break
            ;;
        delete | rm | remove)
            _argc_index=$((_argc_index + 1))
            _argc_action=_argc_parse_delete
            break
            ;;
        kill | x | zap)
            _argc_index=$((_argc_index + 1))
            _argc_action=_argc_parse_kill
            break
            ;;
        help)
            local help_arg="${argc__args[$((_argc_index + 1))]:-}"
            case "$help_arg" in
            list | ls | show)
                _argc_usage_list
                ;;
            new | n | add)
                _argc_usage_new
                ;;
            pick)
                _argc_usage_pick
                ;;
            delete | rm | remove)
                _argc_usage_delete
                ;;
            kill | x | zap)
                _argc_usage_kill
                ;;
            "")
                _argc_usage
                ;;
            *)
                _argc_die "error: invalid value \`$help_arg\` for \`<command>\`"$'\n'"  [possible values: $_argc_subcmds]"
                ;;
            esac
            ;;
        *)
            if [[ "${#argc__positionals[@]}" -eq 0 ]]; then
                _argc_action=_argc_parse_pick
                break
            fi
            ;;
        esac
    done
    _argc_tools=(zellij gum sed awk grep)
    if [[ -n "${_argc_action:-}" ]]; then
        $_argc_action
    else
        _argc_usage
    fi
}
 
_argc_usage_list() {
    cat <<-'EOF'
List Available Sessions
 
USAGE: zellij-picker list [OPTIONS]
 
OPTIONS:
  -p, --plain  No Formatting
  -n, --names  Only print session names
  -h, --help   Print help
EOF
    exit
}
 
_argc_parse_list() {
    local _argc_key _argc_action
    local _argc_subcmds=""
    while [[ $_argc_index -lt $_argc_len ]]; do
        _argc_item="${argc__args[_argc_index]}"
        _argc_key="${_argc_item%%=*}"
        case "$_argc_key" in
        --help | -help | -h)
            _argc_usage_list
            ;;
        --)
            _argc_dash="${#argc__positionals[@]}"
            argc__positionals+=("${argc__args[@]:$((_argc_index + 1))}")
            _argc_index=$_argc_len
            break
            ;;
        --plain | -p)
            if [[ "$_argc_item" == *=* ]]; then
                _argc_die "error: flag \`--plain\` don't accept any value"
            fi
            _argc_index=$((_argc_index + 1))
            if [[ -n "${argc_plain:-}" ]]; then
                _argc_die "error: the argument \`--plain\` cannot be used multiple times"
            else
                argc_plain=1
            fi
            ;;
        --names | -n)
            if [[ "$_argc_item" == *=* ]]; then
                _argc_die "error: flag \`--names\` don't accept any value"
            fi
            _argc_index=$((_argc_index + 1))
            if [[ -n "${argc_names:-}" ]]; then
                _argc_die "error: the argument \`--names\` cannot be used multiple times"
            else
                argc_names=1
            fi
            ;;
        -?*)
            _argc_die "error: unexpected argument \`$_argc_key\` found"
            ;;
        *)
            argc__positionals+=("$_argc_item")
            _argc_index=$((_argc_index + 1))
            ;;
        esac
    done
    _argc_tools=(zellij gum sed awk grep)
    if [[ -n "${_argc_action:-}" ]]; then
        $_argc_action
    else
        argc__fn=list
        if [[ "${argc__positionals[0]:-}" == "help" ]] && [[ "${#argc__positionals[@]}" -eq 1 ]]; then
            _argc_usage_list
        fi
    fi
}
 
_argc_usage_new() {
    cat <<-'EOF'
Create a New Session
 
USAGE: zellij-picker new [NAME]
 
ARGS:
  [NAME]  Specify the session name
EOF
    exit
}
 
_argc_parse_new() {
    local _argc_key _argc_action
    local _argc_subcmds=""
    while [[ $_argc_index -lt $_argc_len ]]; do
        _argc_item="${argc__args[_argc_index]}"
        _argc_key="${_argc_item%%=*}"
        case "$_argc_key" in
        --help | -help | -h)
            _argc_usage_new
            ;;
        --)
            _argc_dash="${#argc__positionals[@]}"
            argc__positionals+=("${argc__args[@]:$((_argc_index + 1))}")
            _argc_index=$_argc_len
            break
            ;;
        *)
            argc__positionals+=("$_argc_item")
            _argc_index=$((_argc_index + 1))
            ;;
        esac
    done
    _argc_tools=(zellij gum sed awk grep)
    if [[ -n "${_argc_action:-}" ]]; then
        $_argc_action
    else
        argc__fn=new
        if [[ "${argc__positionals[0]:-}" == "help" ]] && [[ "${#argc__positionals[@]}" -eq 1 ]]; then
            _argc_usage_new
        fi
        _argc_match_positionals 0
        local values_index values_size
        IFS=: read -r values_index values_size <<<"${_argc_match_positionals_values[0]:-}"
        if [[ -n "$values_index" ]]; then
            argc_name="${argc__positionals[values_index]}"
        fi
    fi
}
 
_argc_usage_pick() {
    cat <<-'EOF'
Launch an active or cached session
 
USAGE: zellij-picker pick [SESSION]
 
ARGS:
  [SESSION]  Specify the session name
EOF
    exit
}
 
_argc_parse_pick() {
    local _argc_key _argc_action
    local _argc_subcmds=""
    while [[ $_argc_index -lt $_argc_len ]]; do
        _argc_item="${argc__args[_argc_index]}"
        _argc_key="${_argc_item%%=*}"
        case "$_argc_key" in
        --help | -help | -h)
            _argc_usage_pick
            ;;
        --)
            _argc_dash="${#argc__positionals[@]}"
            argc__positionals+=("${argc__args[@]:$((_argc_index + 1))}")
            _argc_index=$_argc_len
            break
            ;;
        *)
            argc__positionals+=("$_argc_item")
            _argc_index=$((_argc_index + 1))
            ;;
        esac
    done
    _argc_tools=(zellij gum sed awk grep)
    if [[ -n "${_argc_action:-}" ]]; then
        $_argc_action
    else
        argc__fn=pick
        if [[ "${argc__positionals[0]:-}" == "help" ]] && [[ "${#argc__positionals[@]}" -eq 1 ]]; then
            _argc_usage_pick
        fi
        _argc_match_positionals 0
        local values_index values_size
        IFS=: read -r values_index values_size <<<"${_argc_match_positionals_values[0]:-}"
        if [[ -n "$values_index" ]]; then
            argc_session="${argc__positionals[values_index]}"
        fi
    fi
}
 
_argc_usage_delete() {
    cat <<-'EOF'
Delete a Session
 
USAGE: zellij-picker delete [OPTIONS] <DELETENAME>
 
ARGS:
  <DELETENAME>  Session to delete
 
OPTIONS:
  -f, --force  Delete even if active
  -h, --help   Print help
EOF
    exit
}
 
_argc_parse_delete() {
    local _argc_key _argc_action
    local _argc_subcmds=""
    while [[ $_argc_index -lt $_argc_len ]]; do
        _argc_item="${argc__args[_argc_index]}"
        _argc_key="${_argc_item%%=*}"
        case "$_argc_key" in
        --help | -help | -h)
            _argc_usage_delete
            ;;
        --)
            _argc_dash="${#argc__positionals[@]}"
            argc__positionals+=("${argc__args[@]:$((_argc_index + 1))}")
            _argc_index=$_argc_len
            break
            ;;
        --force | -f)
            if [[ "$_argc_item" == *=* ]]; then
                _argc_die "error: flag \`--force\` don't accept any value"
            fi
            _argc_index=$((_argc_index + 1))
            if [[ -n "${argc_force:-}" ]]; then
                _argc_die "error: the argument \`--force\` cannot be used multiple times"
            else
                argc_force=1
            fi
            ;;
        -?*)
            _argc_die "error: unexpected argument \`$_argc_key\` found"
            ;;
        *)
            argc__positionals+=("$_argc_item")
            _argc_index=$((_argc_index + 1))
            ;;
        esac
    done
    _argc_tools=(zellij gum sed awk grep)
    if [[ -n "${_argc_action:-}" ]]; then
        $_argc_action
    else
        argc__fn=delete
        if [[ "${argc__positionals[0]:-}" == "help" ]] && [[ "${#argc__positionals[@]}" -eq 1 ]]; then
            _argc_usage_delete
        fi
        _argc_match_positionals 0
        local values_index values_size
        IFS=: read -r values_index values_size <<<"${_argc_match_positionals_values[0]:-}"
        if [[ -n "$values_index" ]]; then
            argc_deletename="${argc__positionals[values_index]}"
        else
            _argc_die "error: the required environments \`<DELETENAME>\` were not provided"
        fi
    fi
}
 
_argc_usage_kill() {
    cat <<-'EOF'
Kill a session
 
USAGE: zellij-picker kill <KILLNAME>
 
ARGS:
  <KILLNAME>  Session to kill
EOF
    exit
}
 
_argc_parse_kill() {
    local _argc_key _argc_action
    local _argc_subcmds=""
    while [[ $_argc_index -lt $_argc_len ]]; do
        _argc_item="${argc__args[_argc_index]}"
        _argc_key="${_argc_item%%=*}"
        case "$_argc_key" in
        --help | -help | -h)
            _argc_usage_kill
            ;;
        --)
            _argc_dash="${#argc__positionals[@]}"
            argc__positionals+=("${argc__args[@]:$((_argc_index + 1))}")
            _argc_index=$_argc_len
            break
            ;;
        *)
            argc__positionals+=("$_argc_item")
            _argc_index=$((_argc_index + 1))
            ;;
        esac
    done
    _argc_tools=(zellij gum sed awk grep)
    if [[ -n "${_argc_action:-}" ]]; then
        $_argc_action
    else
        argc__fn=kill
        if [[ "${argc__positionals[0]:-}" == "help" ]] && [[ "${#argc__positionals[@]}" -eq 1 ]]; then
            _argc_usage_kill
        fi
        _argc_match_positionals 0
        local values_index values_size
        IFS=: read -r values_index values_size <<<"${_argc_match_positionals_values[0]:-}"
        if [[ -n "$values_index" ]]; then
            argc_killname="${argc__positionals[values_index]}"
        else
            _argc_die "error: the required environments \`<KILLNAME>\` were not provided"
        fi
    fi
}
 
_argc_match_positionals() {
    _argc_match_positionals_values=()
    _argc_match_positionals_len=0
    local params=("$@")
    local args_len="${#argc__positionals[@]}"
    if [[ $args_len -eq 0 ]]; then
        return
    fi
    local params_len=$# arg_index=0 param_index=0
    while [[ $param_index -lt $params_len && $arg_index -lt $args_len ]]; do
        local takes=0
        if [[ "${params[param_index]}" -eq 1 ]]; then
            if [[ $param_index -eq 0 ]] &&
                [[ ${_argc_dash:-} -gt 0 ]] &&
                [[ $params_len -eq 2 ]] &&
                [[ "${params[$((param_index + 1))]}" -eq 1 ]] \
                ; then
                takes=${_argc_dash:-}
            else
                local arg_diff=$((args_len - arg_index)) param_diff=$((params_len - param_index))
                if [[ $arg_diff -gt $param_diff ]]; then
                    takes=$((arg_diff - param_diff + 1))
                else
                    takes=1
                fi
            fi
        else
            takes=1
        fi
        _argc_match_positionals_values+=("$arg_index:$takes")
        arg_index=$((arg_index + takes))
        param_index=$((param_index + 1))
    done
    if [[ $arg_index -lt $args_len ]]; then
        _argc_match_positionals_values+=("$arg_index:$((args_len - arg_index))")
    fi
    _argc_match_positionals_len=${#_argc_match_positionals_values[@]}
    if [[ $params_len -gt 0 ]] && [[ $_argc_match_positionals_len -gt $params_len ]]; then
        local index="${_argc_match_positionals_values[params_len]%%:*}"
        _argc_die "error: unexpected argument \`${argc__positionals[index]}\` found"
    fi
}
 
_argc_require_tools() {
    local tool missing_tools=()
    for tool in "$@"; do
        if ! command -v "$tool" >/dev/null 2>&1; then
            missing_tools+=("$tool")
        fi
    done
    if [[ "${#missing_tools[@]}" -gt 0 ]]; then
        echo "error: missing tools: ${missing_tools[*]}" >&2
        exit 1
    fi
}
 
_argc_die() {
    if [[ $# -eq 0 ]]; then
        cat
    else
        echo "$*" >&2
    fi
    exit 1
}
 
_argc_run "$@"
 
# ARGC-BUILD }
